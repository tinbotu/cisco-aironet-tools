#!/usr/bin/perl -w
# -*- cperl -*-

=head1 NAME

snmp__zoneflex_clients_multi - SNMP wildcard plugin to monitor associated clients on Ruckus Zoneflex series autonomous mode

=head1 APPLICABLE SYSTEMS

Any SNMP capable networked computer equipment.  Using a command such
as "munin-node-configure --snmp switch.langfeldt.net --snmpversion 2c
--snmpcommunity public | sh -x" should auto-detect all applicable
interfaces.  On a typical switch you will get one plugin pr. ethernet
port.  On a router you might get one plugin pr. VLAN interface.

=head1 CONFIGURATION

As a rule SNMP plugins need site specific configuration.  The default
configuration (shown here) will only work on insecure sites/devices:

   [snmp_*]
	env.version 2
        env.community public

In general SNMP is not very secure at all unless you use SNMP version
3 which supports authentication and privacy (encryption).  But in any
case the community string for your devices should not be "public".

Please see 'perldoc Munin::Plugin::SNMP' for further configuration
information.

=head1 MAGIC MARKERS

  #%# family=snmpauto
  #%# capabilities=snmpconf

=head1 VERSION

  $Id$

=head1 AUTHOR

Akira KUMAGAI <kumaguy@gmail.com>

=head1 LICENSE

GPLv2

=cut

use strict;
use Munin::Plugin;
use Munin::Plugin::SNMP;
use List::Util qw/first/;
use Data::Dumper;
use Carp;

my $response;
my $iface;

my %cDot11ActiveMibs = (
  "ruckusRadioStatsNumSta"  => ".1.3.6.1.4.1.25053.1.1.12.1.1.1.3.1.2",
);

my @ifRadioMode = ("auto", "ieee802dot11g-only", "ieee802dot11b-only", "ieee802dot11ng", "ieee802dot11na", "ieee802dot11a-only", "ieee802dot11ac");


my @ifDescrDo=[];
$ifDescrDo[0] = ".1.3.6.1.4.1.25053.1.1.12.1.1.1.2.1.1.1";
$ifDescrDo[1] = ".1.3.6.1.4.1.25053.1.1.12.1.1.1.2.1.1.2";

my $debug=0;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf") {
	print "require .1.3.6.1.4.1.25053.1.1.12.1.1.1.3.1.2.1\n"; 
	exit 0;
}

my ($session, $error);
my @hasDo = [];

$session = Munin::Plugin::SNMP->session();

my ($host, undef, $version) = Munin::Plugin::SNMP->config_session();
my $ifDescr;
foreach my $i(0 .. $#ifDescrDo)
{
 if(defined($ifDescr = $session->get_single($ifDescrDo[$i]))){
   if(exists $ifRadioMode[$ifDescr]){
     $hasDo[$i] = $ifRadioMode[$ifDescr];
   }
 }
}

if($ARGV[0] and $ARGV[0] eq "config")
{
   print "host_name $host\n" unless $host eq 'localhost';

   print "graph_title Dot11 Active Associates\n";

	# has no any Dot11 interfaces.
	#exit;

    print "graph_order ruckusRadioStatsNumSta1 ruckusRadioStatsNumSta2 \n";
    print "graph_vlabel counts\n";
    print "graph_category network\n";
    print "graph_info This graph shows counts of Dot11 active associates.\n";

    printf("ruckusRadioStatsNumSta1.info %s Clients\n", $hasDo[0]) if $hasDo[0];
    printf("ruckusRadioStatsNumSta2.info %s Clients\n", $hasDo[1]) if $hasDo[1];

    printf("ruckusRadioStatsNumSta1.label %s Clients\n", $hasDo[0]) if $hasDo[0];
    printf("ruckusRadioStatsNumSta2.label %s Clients\n", $hasDo[1]) if $hasDo[1];

    print "ruckusRadioStatsNumSta1.type GAUGE\n" if $hasDo[0];
    print "ruckusRadioStatsNumSta2.type GAUGE\n" if $hasDo[1];

    print "ruckusRadioStatsNumSta1.draw LINE1\n"  if $hasDo[0];
    print "ruckusRadioStatsNumSta2.draw LINE1\n"  if $hasDo[1];

    exit 0;
}


while(my($label, $mib) = each(%cDot11ActiveMibs))
{
  for(my $i=0; $i<2; $i++){
  if(! $hasDo[$i]){ next; }
   my $mibif = sprintf("%s.%d", $mib, $i+1);
   my $result = $session->get_single($mibif);
   if(!defined($result)){
     printf("%s%d.value U\n", $label, $i+1);
   }
   else{
     printf("%s%d.value %d\n", $label, $i+1, $result);
   }
  }
}


__END__
