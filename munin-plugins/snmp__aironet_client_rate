#!/usr/bin/perl -w
# -*- cperl -*-

=head1 NAME

snmp__aironet_clients_multi - SNMP wildcard plugin to monitor associated clients or bridges on Cisco Aironet series.

=head1 APPLICABLE SYSTEMS

Cisco Aironet series, 802.11a/b/g/n

=head1 CONFIGURATION

As a rule SNMP plugins need site specific configuration.  The default
configuration (shown here) will only work on insecure sites/devices:

   [snmp_*]
	env.version 2
        env.community public

=head1 MAGIC MARKERS

  #%# family=snmpauto
  #%# capabilities=snmpconf

=head1 VERSION

  $Id$

=head1 AUTHOR

Akira KUMAGAI <kumaguy@gmail.com>
Karl Dyson <hackery@perlbitch.com> (802.11n additions based on observation of AIR-AP1142N-E-K9)

=head1 LICENSE

GPLv2

=cut

use strict;
use Munin::Plugin;
use Munin::Plugin::SNMP;
use Data::Dumper;
use Carp;

my $response;

my $oid     = ".1.3.6.1.4.1.9.9.273.1.3.1.1.1";
my $require = $oid;
my @rates   = (1, 2, 5.5, 6, 9, 11, 12, 18, 24, 36, 48, 54);
push @rates, "m$_" for(0..15);
my %color = qw/
1 091321
2 122643
55 1B3965
6 244C87
9 2D5FA9
11 3672CB
12 3F85ED
18 48990F
24 51AC31
36 5ABF53
48 63D275
54 6CE597
m0 75F8B9
m1 7F0BDB
m2 881EFD
m3 91321F
m4 9A4541
m5 A35863
m6 AC6B85
m7 B57EA7
m8 BE91C9
m9 C7A4EB
m10 D0B80D
m11 D9CB2F
m12 E2DE51
m13 EBF173
m14 F50495
m15 FE17B7
/;
my $debug=0;
my %baudrates = ();

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf") {
	print "require $require\n";
	exit 0;
}

my ($session, $error);

$session = Munin::Plugin::SNMP->session();

my ($host,undef,$version) = Munin::Plugin::SNMP->config_session();

if($ARGV[0] and $ARGV[0] eq "config")
{
   print "host_name $host\n" unless $host eq 'localhost';
   print "graph_title 802.11 Client Rate\n";

   print "graph_vlabel clients\n";
   print "graph_category network\n";
   print "graph_info This graph shows counts of Dot11 rates.\n";


   print "graph_order ";
   # this could be foreach my $r (reverse @rates) if preferred...
   foreach my $r (@rates)
   {
     my $int_label = $r;
     $int_label =~ s/\.//;
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "")." ", $int_label);
   }
   print "\n";


   foreach my $r (@rates)
   {
     my $int_label = $r;
     $int_label =~ s/\.//;
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".info %s".($r =~ m/^[\d\.]+$/ ? "Mbps" : "")."\n", $int_label, $r);
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".label %s".($r =~ m/^[\d\.]+$/ ? "Mbps" : "")."\n", $int_label, $r);
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".type GAUGE\n", $int_label);
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".draw AREASTACK\n", $int_label);
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".max 384\n", $int_label);
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".min 0\n", $int_label);
     printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".colour %s\n", $int_label, $color{$int_label});
   }
   exit 0;
}


for(my $walk=0; $walk <= 1024; $walk++)
{
  my $result = $session->get_next_request($oid) or die("_1.0M.value U\n");
  if($result){
    my $data;
    ($oid, $data) = (%{$result});
    if($oid !~ /${require}/){ last; }

    my $baud;
    if($data =~ m/^0x/) {
        $baud = sprintf "m%d", hex($data);
    } elsif($data =~ /[[:print:]]/) {
        $baud = unpack("C", $data) /2;
    } else {
        $baud = "m".unpack("C", $data);
    }
    $baudrates{$baud}++;
  }
}

foreach my $r (@rates)
{
  my $int_label = $r;
  $int_label =~ s/\.//;
  if($baudrates{$r}){
    printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".value %d\n", $int_label, $baudrates{$r});
  }
  else{
   printf("_%s".($r =~ m/^[\d\.]+$/ ? "M" : "").".value 0\n", $int_label);
  }
}

__END__

